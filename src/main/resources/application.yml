spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/chat-service
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      # create: 애플리케이션 시작 시 기존 테이블을 모두 삭제하고 새로 생성. 데이터 초기화됨.
      # create-drop: create 처럼 테이블을 생성하고, 애플리케이션 종료 시 테이블도 삭제.
      # update: 엔티티 기준으로 DB 테이블을 자동 수정. 데이터는 유지됨.
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      # consumer가 속할 그룹
      group-id: chat-group
      # 처음부터 읽기
      auto-offset-reset: earliest
      # kafka consumer key 역직렬화 방식
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # kafka consumer value 역직렬화 방식
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # kafka producer key 역직렬화 방식
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # kafka producer key 역직렬화 방식
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

#  data:
#    mongodb:
#      uri: mongodb+srv://tjwnstjr27:sjs820@cluster.boyh9ls.mongodb.net/

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    cache: false  # 개발 중에는 캐시를 비활성화하는 것이 좋습니다.

server:
  # https 포트 번호: 8443
  # Tomcat, SSL
  port: 8443

  ssl:
    enabled: true
    key-store: classpath:ssl-server.jks
    key-store-password: test1234
    key-store-type: JKS
    key-alias: selfsigned_localhost_sslserver

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace